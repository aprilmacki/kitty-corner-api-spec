openapi: 3.1.0
info:
  version: 1.0.0
  title: KittyCorner API
  description: This is the KittyCorner API.
servers:
  - url: http://example.com/v1

paths:
  /auth/signup:
    post:
      summary: "Sign up for an account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                name:
                  type: string
                birthday:
                  type: string
                pronouns:
                  type: string
            example:
              email: "aprilmack@posteo.net"
              username: "aprilmack"
              password: "8bsb3iiV8eew9aV"
              name: "April"
              birthday: "04/1997"
              pronouns: "she/her"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"

  /auth/signin:
    post:
      summary: "Sign in to your account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              username: "aprilmack"
              password: "8bsb3iiV8eew9aV"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"

  /auth/signout:
    post:
      summary: "Sign out"
      security:
        - accessToken: []
      responses:
        204:
          description: "Successful"

  /auth/refresh:
    post:
      summary: "Refresh tokens"
      security:
        - refreshToken: []
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"

  /posts:
    get:
      summary: "Get posts"
      security:
        - accessToken: []
      parameters:
        - name: startAge
          in: query
          required: false
          description: The inclusive start age.
          schema:
            type: integer
            format: int64
            minimum: 18
            default: 18
        - name: endAge
          in: query
          required: false
          description: The inclusive end age. Must be greater than or equal to `startAge`. End age is infinite if omitted.
          schema:
            type: integer
            format: int64
            minimum: 18
        - name: radius
          in: query
          required: false
          description: The search radius in kilometers. Radius is infinite if omitted.
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: limit
          in: query
          required: true
          description: The max number of posts to return
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          required: false
          description: | 
            The first `limit` posts are returned sorted by newest first. Start at the post with ID `cursor`.
            Note that post IDs are auto incrementing chronologically. Start at the newest post if omitted.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  nextCursor:
                    type: integer
                    format: int64
              example:
                posts:
                  - postId: 15
                    username: francis
                    profileName: Francs
                    profilePhoto: "IzpEw7XDoFLCjxDCrBHCi8OQCcOIw54xeMKNw4PCn1/DtMKTwoNV"
                    body: "miaaaoo!"
                    distanceKm: 0.2
                    totalThumbsUp: 23
                    totalThumbsDown: 0
                    totalComments: 1
                    timestampSeconds: 1740752040
                  - postId: 14
                    username: minathecat
                    profileName: Mina
                    profilePhoto: "IzpEw7XDoFLCjxDCrBHCi8OQCcOIw54xeMKNw4PCn1/DtMKTwoNV"
                    body: "meow"
                    distanceKm: 1.4
                    totalThumbsUp: 102
                    totalThumbsDown: 3
                    totalComments: 3
                    timestampSeconds: 1740773520
                nextCursor: 13

  /posts/{postId}:
    get:
      summary: "Get post"
      security:
        - accessToken: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
              example:
                postId: 14
                username: minathecat
                profileName: Mina
                profilePhoto: "IzpEw7XDoFLCjxDCrBHCi8OQCcOIw54xeMKNw4PCn1/DtMKTwoNV"
                body: "meow"
                distanceKm: 1.4
                totalThumbsUp: 102
                totalThumbsDown: 3
                totalComments: 3
                timestampSeconds: 1740773520

  /posts/{postId}/comments:
    get:
      summary: "Get post comments"
      security:
        - accessToken: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
              example:
                comments:
                  - commentId: 1234
                    username: minathecat
                    body: "i for one actually hate my brother, francis"
                    totalLikes: 2
                    totalDislikes: 23
                    createdAtEpochSeconds: 1741301877
                  - commentId: 1235
                    username: francis
                    body: "hey that's mean!"
                    totalLikes: 32
                    totalDislikes: 1
                    createdAtEpochSeconds: 1741301955
    post:
      summary: "Create a comment"
      security:
        - accessToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /posts/{postId}/comments/{commentId}:
    delete:
      summary: "Delete a comment"
      security:
        - accessToken: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: "Successful"
    put:
      summary: "Edit a comment"
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /posts/{postId}/reactions:
    post:
      summary: "Create a reaction"
    delete:
      summary: "Delete a reaction"

  /users/{username}/profile:
    get:
      summary: "Get user profile"
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                photo:
                  type: string
                  contentEncoding: base64
                  contentMediaType: image/png
  /users/{username}/posts:
    get:
      summary: "Get users posts"

components:
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The access token
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The refresh token
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: |
            A JWT access token. The client should pass this as an authorization bearer header when making
            subsequent API calls.
          contentMediaType: application/jwt
          contentSchema:
            type: array
            minItems: 2
            prefixItems:
              - type: object
                properties:
                  typ:
                    type: string
                    const: JWT
                  alg:
                    type: string
                    const: HS256
              - type: object
                properties:
                  sub:
                    type: string
                    description: The username
                  exp:
                    type: integer
                    format: int64
                    description: The expiration time in epoch seconds
                  iat:
                    type: integer
                    format: int64
                    description: The issue time in epoch seconds
        refreshToken:
          type: string
          description: |
            A JWT refresh token. The client may use this to fetch a new access and refresh token pair when the
            current access token expires. It may be used once, after which it becomes invalid.
    Post:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        username:
          type: string
        body:
          type: string
        distanceKm:
          type: number
          format: decimal
        totalLikes:
          type: integer
          format: int64
          minimum: 0
        totalDislikes:
          type: integer
          format: int64
          minimum: 0
        totalComments:
          type: integer
          format: int64
          minimum: 0
        createdAtEpochSeconds:
          type: integer
          format: int64
    Comment:
      type: object
      properties:
        commentId:
          type: string
        username:
          type: string
        body:
          type: string
        totalLikes:
          type: integer
          format: int64
          minimum: 0
        totalDislikes:
          type: integer
          format: int64
          minimum: 0
        createdAtEpochSeconds:
          type: integer
          format: int64
        updatedAtEpochSeconds:
          type: integer
          format: int64