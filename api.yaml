openapi: 3.1.0
info:
  version: 1.0.0
  title: KittyCorner API
  description: This is the KittyCorner API.
servers:
  - url: https://example.com/api/v1

tags:
  - name: auth
    description: Authorization Endpoints
  - name: posts
    description: Posts Endpoints
  - name: users
    description: Users Endpoints
  - name: comments
    description: Comments Endpoints
  - name: settings
    description: Settings Endpoints

paths:
  /auth/signup:
    post:
      summary: "Sign up for an account"
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                name:
                  type: string
                birthday:
                  type: string
                pronouns:
                  type: string
            example:
              email: "aprilmack@posteo.net"
              username: "aprilmack"
              password: "8bsb3iiV8eew9aV"
              name: "April"
              birthday: "04/1997"
              pronouns: "she/her"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Bad Request
                status: 400
                detail: Username aprilmack is already in use
                path: /auth/signup

  /auth/signin:
    post:
      summary: "Sign in to your account"
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              username: "aprilmack"
              password: "8bsb3iiV8eew9aV"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Bad Request
                status: 400
                detail: Field password missing
                path: /auth/signin
        403:
          description: "Incorrect username or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Forbidden
                status: 403
                detail: Username or password incorrect
                path: /auth/signin

  /auth/signout:
    post:
      summary: "Sign out"
      tags:
        - auth
      security:
        - accessToken: []
      responses:
        204:
          description: "Successful"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /auth/signout

  /auth/refresh:
    post:
      summary: "Refresh tokens"
      tags:
        - auth
      security:
        - refreshToken: []
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        401:
          description: "No refresh token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No refresh token provided
                path: /auth/refresh
        403:
          description: "Refresh token no longer valid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /posts:
    get:
      summary: "Get posts"
      tags:
        - posts
      security:
        - accessToken: []
      parameters:
        - name: startAge
          in: query
          required: false
          description: The inclusive start age.
          schema:
            type: integer
            format: int64
            minimum: 18
            default: 18
        - name: endAge
          in: query
          required: false
          description: The inclusive end age. Must be greater than or equal to `startAge`. End age is infinite if omitted.
          schema:
            type: integer
            format: int64
            minimum: 18
        - name: distanceKm
          in: query
          required: false
          description: The search radius in kilometers. Radius is infinite if omitted.
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: limit
          in: query
          required: true
          description: The max number of posts to return
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          required: false
          description: | 
            The first `limit` posts are returned sorted by newest first. Start at the post with ID `cursor`.
            Note that post IDs are auto incrementing chronologically. Start at the newest post if omitted.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  nextCursor:
                    type: integer
                    format: int64
              example:
                posts:
                  - postId: 15
                    username: francis
                    body: "miaaaoo!"
                    distanceKm: 0.2
                    totalThumbsUp: 23
                    totalThumbsDown: 0
                    totalComments: 1
                    createdAtEpochSeconds: 1740752040
                    updatedAtEpochSeconds: 1740752040
                    myReaction: "like"
                  - postId: 14
                    username: minathecat
                    body: "meow"
                    distanceKm: 1.4
                    totalThumbsUp: 102
                    totalThumbsDown: 3
                    totalComments: 3
                    createdAtEpochSeconds: 1740773520
                    updatedAtEpochSeconds: 1740773520
                    myReaction: "dislike"
                nextCursor: 13
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts

  /posts/{postId}:
    get:
      summary: "Get post"
      tags:
        - posts
      security:
        - accessToken: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
              example:
                postId: 14
                username: minathecat
                body: "meow"
                distanceKm: 1.4
                totalThumbsUp: 102
                totalThumbsDown: 3
                totalComments: 3
                createdAtEpochSeconds: 1740773520
                updatedAtEpochSeconds: 1740773520
                myReaction: null
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts/{postId}
        404:
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /posts/{postId}/comments:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: "Get post comments"
      tags:
        - comments
      security:
        - accessToken: [ ]
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
              example:
                comments:
                  - commentId: 1234
                    username: minathecat
                    body: "i for one actually hate my brother, francis"
                    totalLikes: 2
                    totalDislikes: 23
                    createdAtEpochSeconds: 1741301877
                    updatedAtEpochSeconds: 1741301877
                    myReaction: "like"
                  - commentId: 1235
                    username: francis
                    body: "hey that's mean!"
                    totalLikes: 32
                    totalDislikes: 1
                    createdAtEpochSeconds: 1741301955
                    updatedAtEpochSeconds: 1741302015
                    myReaction: null
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts/{postId}/comments
        404:
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    post:
      summary: "Create a comment"
      tags:
        - comments
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
            example:
              body: "meooow!"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
              example:
                commentId: 15
                username: minathecat
                body: "meooow!"
                totalLikes: 12
                totalDislikes: 0
                createdAtEpochSeconds: 1741301877
                updatedAtEpochSeconds: 1741301877
                myReaction: null
          400:
            description: "Bad request"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"
          401:
            description: "No access token provided"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"
                example:
                  title: Unauthorized
                  status: 401
                  detail: No access token provided
                  path: /posts/{postId}/comments
          404:
            description: "Post not found"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"

  /posts/{postId}/comments/{commentId}:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    delete:
      summary: "Delete a comment"
      tags:
        - comments
      security:
        - accessToken: [ ]
      responses:
        204:
          description: "Successful"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts/{postId}/comments/{commentId}
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        404:
          description: "Post or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    put:
      summary: "Edit a comment"
      tags:
        - comments
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
            example:
              body: "i've edited this existing comment"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
              example:
                commentId: 15
                username: minathecat
                body: "i've edited this existing comment"
                totalLikes: 12
                totalDislikes: 0
                createdAtEpochSeconds: 1741301877
                updatedAtEpochSeconds: 1741301997
                myReaction: null
          400:
            description: "Bad request"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"
          401:
            description: "No access token provided"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"
                example:
                  title: Unauthorized
                  status: 401
                  detail: No access token provided
                  path: /posts/{postId}/comments/{commentId}
          403:
            description: "Forbidden"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"
          404:
            description: "Post or comment not found"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ProblemDetails"

  /posts/{postId}/comments/{commentId}/my-reaction:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: "Update a comment reaction"
      tags:
        - comments
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [like, dislike]
            example:
              type: like
      responses:
        204:
          description: "Successful"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts/{postId}/comments/{commentId}/my-reaction
        404:
          description: "Post or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /posts/{postId}/my-reaction:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    put:
      summary: "Update a post reaction"
      tags:
        - posts
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
            example:
              type: like
      responses:
        204:
          description: "Successful"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /posts/{postId}/my-reactions
        404:
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /users/{username}/available:
    get:
      summary: "Check if username is available"
      tags:
        - users
      parameters:
        - name: username
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean

  /users/{username}/profile:
    get:
      summary: "Get user profile"
      tags:
        - users
      security:
        - accessToken: []
      parameters:
        - name: username
          in: path
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
              examples:
                me:
                  $ref: "#/components/examples/Profile/me"
                mina:
                  $ref: "#/components/examples/Profile/mina"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/profile
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    put:
      summary: "Update user profile"
      tags:
        - users
      security:
        - accessToken: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                pronouns:
                  type: string
                birthday:
                  type: string
                  description: MM/DD/YYYY
                latitude:
                  type: number
                  format: decimal
                longitude:
                  type: number
                  format: decimal
            example:
              name: Mina
              pronouns: she/they
              birthday: "01/01/1997"
              latitude: 41.881832
              longitude: -87.623177
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
              examples:
                me:
                  $ref: "#/components/examples/Profile/me"
                mina:
                  $ref: "#/components/examples/Profile/mina"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/profile
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /users/{username}/photo:
    parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
    get:
      summary: "Get user profile photo"
      tags:
        - users
      security:
        - accessToken: []
      responses:
        200:
          description: "Successful"
          content:
            image/png:
              type: string
              format: binary
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/photo
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    post:
      summary: "Update user profile photo"
      tags:
        - users
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: "Successful"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/photo
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    delete:
      summary: "Delete user profile photo"
      tags:
        - users
      security:
        - accessToken: []
      responses:
        204:
          description: "Successful"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/photo
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /users/{username}/posts:
    get:
      summary: "Get users posts"
      tags:
        - users
      security:
        - accessToken: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: The max number of posts to return
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          required: false
          description: |
            The first `limit` posts are returned sorted by newest first. Start at the post with ID `cursor`.
            Note that post IDs are auto incrementing chronologically. Start at the newest post if omitted.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                    nextCursor:
                      type: integer
                      format: int64
              example:
                posts:
                  - postId: 15
                    username: minathecat
                    body: "miaaaoo!"
                    distanceKm: 0.2
                    totalThumbsUp: 23
                    totalThumbsDown: 0
                    totalComments: 1
                    createdAtEpochSeconds: 1740752040
                    myReaction:
                      type: "like"
                  - postId: 14
                    username: minathecat
                    body: "meow"
                    distanceKm: 1.4
                    totalThumbsUp: 102
                    totalThumbsDown: 3
                    totalComments: 3
                    createdAtEpochSeconds: 1740773520
                    myReaction:
                      type: "like"
                nextCursor: 13
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/posts
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
  /settings:
    get:
      summary: "Get settings"
      tags:
        - settings
      security:
        - accessToken: []
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
              example:
                email: "aprilmack@posteo.net"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /settings

    put:
      summary: "Update settings"
      tags:
        - settings
      security:
        - accessToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              username: "aprilmack"
              password: "8bsb3iiV8eew9aV"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /settings

  /users/{username}/delete-requests:
    post:
      summary: "Create request to delete user's account"
      tags:
        - users
      security:
        - accessToken: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "Successful"
        401:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
              example:
                title: Unauthorized
                status: 401
                detail: No access token provided
                path: /users/{username}/delete-requests
        403:
          description: "No access token provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

components:
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The access token
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The refresh token
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: |
            A JWT access token. The client should pass this as an authorization bearer header when making
            subsequent API calls.
          contentMediaType: application/jwt
          contentSchema:
            type: array
            minItems: 2
            prefixItems:
              - type: object
                properties:
                  typ:
                    type: string
                    const: JWT
                  alg:
                    type: string
                    const: HS256
              - type: object
                properties:
                  sub:
                    type: string
                    description: The username
                  exp:
                    type: integer
                    format: int64
                    description: The expiration time in epoch seconds
                  iat:
                    type: integer
                    format: int64
                    description: The issue time in epoch seconds
        refreshToken:
          type: string
          description: |
            A JWT refresh token. The client may use this to fetch a new access and refresh token pair when the
            current access token expires. It may be used once, after which it becomes invalid.
    Post:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        username:
          type: string
        body:
          type: string
        distanceKm:
          type: number
          format: decimal
        totalLikes:
          type: integer
          format: int64
          minimum: 0
        totalDislikes:
          type: integer
          format: int64
          minimum: 0
        totalComments:
          type: integer
          format: int64
          minimum: 0
        createdAtEpochSeconds:
          type: integer
          format: int64
        updatedAtEpochSeconds:
          type: integer
          format: int64
        myReaction:
          type: object
          properties:
            type:
              type: string
              enum: [ like, dislike ]
    Comment:
      type: object
      properties:
        commentId:
          type: string
        username:
          type: string
        body:
          type: string
        totalLikes:
          type: integer
          format: int64
          minimum: 0
        totalDislikes:
          type: integer
          format: int64
          minimum: 0
        createdAtEpochSeconds:
          type: integer
          format: int64
        updatedAtEpochSeconds:
          type: integer
          format: int64
        myReaction:
          type: string
          enum: [ like, dislike ]
    Reaction:
      type: object
      properties:
        type:
          type: string
          enum: [ like, dislike ]
    Profile:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        pronouns:
          type: string
        age:
          type: integer
          format: int64
          description: The user's age. This is derived from their birthday which is kept private.
        birthday:
          type: string
          description: MM/DD/YYY. This is only returned for the current user.
        location:
          type: string
          description: The user's city and state/territory. This is derived from their lat/lon which are kept private.
        latitude:
          type: number
          format: decimal
          description: This is only returned for the current user.
        longitude:
          type: number
          format: decimal
          description: This is only returned for the current user.
        joinedAtEpochSeconds:
          type: integer
          format: int64
        totalPosts:
          type: integer
          format: int64
    ProblemDetails:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        path:
          type: string
  examples:
    Profile:
      me:
        value:
          username: "aprilmack"
          name: "April"
          pronouns: "she/her"
          age: 27
          birthday: "01/01/1997"
          location: "Chicago, IL"
          latitude: 41.881832
          longitude: -87.623177
          joinedAtEpochSeconds: 1736971200
          totalPosts: 20
      mina:
        value:
          username: "minathecat"
          name: "Mina"
          pronouns: "she/her"
          age: 5
          birthday: null
          location: "Chicago, IL"
          latitude: null
          longitude: null
          joinedAtEpochSeconds: 1736971200
          totalPosts: 20
